NAME
    Scope::Upper - Act on upper scopes.

VERSION
    Version 0.10

SYNOPSIS
        package X;

        use Scope::Upper qw/reap localize localize_elem localize_delete :words/;

        sub desc { shift->{desc} }

        sub set_tag {
         my ($desc) = @_;

         # First localize $x so that it gets destroyed last
         localize '$x' => bless({ desc => $desc }, __PACKAGE__) => UP; # one scope up

         reap sub {
          my $pkg = caller;
          my $x = do { no strict 'refs'; ${$pkg.'::x'} }; # Get the $x in the scope
          print $x->desc . ": done\n";
         } => SCOPE 1; # same as UP here

         localize_elem '%SIG', '__WARN__' => sub {
          my $pkg = caller;
          my $x = do { no strict 'refs'; ${$pkg.'::x'} }; # Get the $x in the scope
          CORE::warn($x->desc . ': ' . join('', @_));
         } => UP CALLER 0; # same as UP here

         # delete last @ARGV element
         localize_delete '@ARGV', -1 => UP SUB HERE; # same as UP here
        }

        package Y;

        {
         X::set_tag('pie');
         # $x is now a X object, and @ARGV has one element less
         warn 'what'; # warns "pie: what at ..."
         ...
        } # "pie: done" is printed

        package Z;

        use Scope::Upper qw/unwind want_at :words/;

        sub try (&) {
         my @result = shift->();
         my $cx = SUB UP SUB;
         unwind +(want_at($cx) ? @result : scalar @result) => $cx;
        }

        ...

        sub zap {
         try {
          return @things; # returns to try() and then outside zap()
          # not reached
         }
         # not reached
        }

        my @what = zap(); # @what contains @things

DESCRIPTION
    This module lets you defer actions *at run-time* that will take place
    when the control flow returns into an upper scope. Currently, you can:

    *   hook an upper scope end with "reap" ;

    *   localize variables, array/hash values or deletions of elements in
        higher contexts with respectively "localize", "localize_elem" and
        "localize_delete" ;

    *   return values immediately to an upper level with "unwind", and know
        which context was in use then with "want_at".

FUNCTIONS
    In all those functions, $context refers to the target scope.

    You have to use one or a combination of "WORDS" to build the $context
    passed to these functions. This is needed in order to ensure that the
    module still works when your program is ran in the debugger. The only
    thing you can assume is that it is an *absolute* indicator of the frame,
    which means that you can safely store it at some point and use it when
    needed, and it will still denote the original scope.

  "reap $callback, $context"
    Add a destructor that calls $callback (in void context) when the upper
    scope represented by $context ends.

  "localize $what, $value, $context"
    A "local" delayed to the time of first return into the upper scope
    denoted by $context. $what can be :

    *   A glob, in which case $value can either be a glob or a reference.
        "localize" follows then the same syntax as "local *x = $value". For
        example, if $value is a scalar reference, then the "SCALAR" slot of
        the glob will be set to $$value - just like "local *x = \1" sets $x
        to 1.

    *   A string beginning with a sigil, representing the symbol to localize
        and to assign to. If the sigil is '$', "localize" follows the same
        syntax as "local $x = $value", i.e. $value isn't dereferenced. For
        example,

            localize '$x', \'foo' => HERE;

        will set $x to a reference to the string 'foo'. Other sigils ('@',
        '%', '&' and '*') require $value to be a reference of the
        corresponding type.

        When the symbol is given by a string, it is resolved when the actual
        localization takes place and not when "localize" is called. This
        means that

            sub tag { localize '$x', $_[0] => UP }

        will localize in the caller's namespace.

  "localize_elem $what, $key, $value, $context"
    Similar to "localize" but for array and hash elements. If $what is a
    glob, the slot to fill is determined from which type of reference $value
    is ; otherwise it's inferred from the sigil. $key is either an array
    index or a hash key, depending of which kind of variable you localize.

  "localize_delete $what, $key, $context"
    Similiar to "localize", but for deleting variables or array/hash
    elements. $what can be:

    *   A glob, in which case $key is ignored and the call is equivalent to
        "local *x".

    *   A string beginning with '@' or '%', for which the call is equivalent
        to respectiveley "local $a[$key]; delete $a[$key]" and "local
        $h{$key}; delete $h{$key}".

    *   A string beginning with '&', which more or less does "undef &func"
        in the upper scope. It's actually more powerful, as &func won't even
        "exists" anymore. $key is ignored.

  "unwind @values, $context"
    Returns @values *from* the context pointed by $context, i.e. from the
    subroutine, eval or format just above $context, and immediately restart
    the program flow at this point - thus effectively returning to (or from,
    depending on how you see it) an upper context.

    The upper context isn't coerced onto @values, which is hence always
    evaluated in list context. This means that

        my $num = sub {
         my @a = ('a' .. 'z');
         unwind @a => HERE;
         # not reached
        }->();

    will set $num to 'z'. You can use "want_at" to handle these cases.

  "want_at $context"
    Like "wantarray", but for the subroutine/eval/format just above
    $context.

    The previous example can then be "corrected" :

        my $num = sub {
         my @a = ('a' .. 'z');
         unwind +(want_at(HERE) ? @a : scalar @a) => HERE;
         # not reached
        }->();

    will rightfully set $num to 26.

CONSTANTS
  "SU_THREADSAFE"
    True iff the module could have been built when thread-safety features.

WORDS
  Constants
   "TOP"
    Returns the context that currently represents the highest scope.

   "HERE"
    The context of the current scope.

  Getting a context from a context
    For any of those functions, $from is expected to be a context. When
    omitted, it defaults to the the current context.

   "UP $from"
    The context of the scope just above $from.

   "SUB $from"
    The context of the closest subroutine above $from. Note that $from is
    returned if it is already a subroutine context ; hence "SUB SUB == SUB".

   "EVAL $from"
    The context of the closest eval above $from. Note that $from is returned
    if it is already an eval context ; hence "EVAL EVAL == EVAL".

  Getting a context from a level
    Here, $level should denote a number of scopes above the current one.
    When omitted, it defaults to 0 and those functions return the same
    context as "HERE".

   "SCOPE $level"
    The $level-th upper context, regardless of its type.

   "CALLER $level"
    The context of the $level-th upper subroutine/eval/format. It kind of
    corresponds to the context represented by "caller $level", but while
    e.g. "caller 0" refers to the caller context, "CALLER 0" will refer to
    the top scope in the current context.

  Examples
    Where "reap" fires depending on the $cxt :

        sub {
         eval {
          sub {
           {
            reap \&cleanup => $cxt;
            ...
           }     # $cxt = SCOPE(0), or HERE
           ...
          }->(); # $cxt = SCOPE(1), or UP, or SUB, or CALLER, or CALLER(0)
          ...
         };      # $cxt = SCOPE(2), or UP UP, or UP SUB, or EVAL, or CALLER(1)
         ...
        }->();   # $cxt = SCOPE(3), or SUB UP SUB, or SUB EVAL, or CALLER(2)
        ...

    Where "localize", "localize_elem" and "localize_delete" act depending on
    the $cxt :

        sub {
         eval {
          sub {
           {
            localize '$x' => 1 => $cxt;
            # $cxt = SCOPE(0), or HERE
            ...
           }
           # $cxt = SCOPE(1), or UP, or SUB, or CALLER, or CALLER(0)
           ...
          }->();
          # $cxt = SCOPE(2), or UP UP, or UP SUB, or EVAL, or CALLER(1)
          ...
         };
         # $cxt = SCOPE(3), or SUB UP SUB, or SUB EVAL, or CALLER(2)
         ...
        }->();
        # $cxt = SCOPE(4), UP SUB UP SUB, or UP SUB EVAL, or UP CALLER(2), or TOP
        ...

    Where "unwind" and "want_at" point to depending on the $cxt:

        sub {
         eval {
          sub {
           {
            unwind @things => $cxt;
            ...
           }
           ...
          }->(); # $cxt = SCOPE(0 .. 1), or HERE, or UP, or SUB, or CALLER(0)
          ...
         };      # $cxt = SCOPE(2), or UP UP, or UP SUB, or EVAL, or CALLER(1)
         ...
        }->();   # $cxt = SCOPE(3), or SUB UP SUB, or SUB EVAL, or CALLER(2)
        ...

EXPORT
    The functions "reap", "localize", "localize_elem", "localize_delete",
    "unwind" and "want_at" are only exported on request, either individually
    or by the tags ':funcs' and ':all'.

    The constant "SU_THREADSAFE" is also only exported on request,
    individually or by the tags ':consts' and ':all'.

    Same goes for the words "TOP", "HERE", "UP", "SUB", "EVAL", "SCOPE" and
    "CALLER" that are only exported on request, individually or by the tags
    ':words' and ':all'.

CAVEATS
    Be careful that local variables are restored in the reverse order in
    which they were localized. Consider those examples:

        local $x = 0;
        {
         reap sub { print $x } => HERE;
         local $x = 1;
         ...
        }
        # prints '0'
        ...
        {
         local $x = 1;
         reap sub { $x = 2 } => HERE;
         ...
        }
        # $x is 0

    The first case is "solved" by moving the "local" before the "reap", and
    the second by using "localize" instead of "reap".

    The effects of "reap", "localize" and "localize_elem" can't cross
    "BEGIN" blocks, hence calling those functions in "import" is deemed to
    be useless. This is an hopeless case because "BEGIN" blocks are executed
    once while localizing constructs should do their job at each run.
    However, it's possible to hook the end of the current scope compilation
    with B::Hooks::EndOfScope.

    Some rare oddities may still happen when running inside the debugger. It
    may help to use a perl higher than 5.8.9 or 5.10.0, as they contain some
    context-related fixes.

DEPENDENCIES
    XSLoader (standard since perl 5.006).

SEE ALSO
    Alias, Hook::Scope, Scope::Guard, Guard.

    Continuation::Escape is a thin wrapper around Scope::Upper that gives
    you a continuation passing style interface to "unwind". It's easier to
    use, but it requires you to have control over the scope where you want
    to return.

AUTHOR
    Vincent Pit, "<perl at profvince.com>", <http://www.profvince.com>.

    You can contact me by mail or on "irc.perl.org" (vincent).

BUGS
    Please report any bugs or feature requests to "bug-scope-upper at
    rt.cpan.org", or through the web interface at
    <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Scope-Upper>. I will be
    notified, and then you'll automatically be notified of progress on your
    bug as I make changes.

SUPPORT
    You can find documentation for this module with the perldoc command.

        perldoc Scope::Upper

    Tests code coverage report is available at
    <http://www.profvince.com/perl/cover/Scope-Upper>.

ACKNOWLEDGEMENTS
    Inspired by Ricardo Signes.

    Thanks to Shawn M. Moore for motivation.

COPYRIGHT & LICENSE
    Copyright 2008,2009,2010 Vincent Pit, all rights reserved.

    This program is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

